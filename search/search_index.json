{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Kavyansh Pandey - Member of Technical Staff, Aviz Networks","text":"<p>Hey there! \ud83d\udc4b\ud83c\udffb Welcome to my space, it's Kavyansh's domain! Here, I share insights from my journey in development. With 4 years of hands-on experience crafting production-grade code, Python holds the top spot in my toolkit. \ud83d\udc0d  </p> <p>Let's dive into the world of coding together! \ud83d\ude80</p> <p></p>"},{"location":"#developers-toolbox-cheat-sheet-i-use-in-my-dev-life","title":"\ud83d\udcbb \"Developer's Toolbox: Cheat Sheet I use in my dev life\" \ud83d\udee0\ufe0f","text":"dockerKafkaLogsLinux and ssh commandsOther Useful commands <pre><code>- `docker ps`: List all running containers along with details like ports, container ID, image name, etc.\n- `docker-compose up -d [image name]`: Run a service as a daemon in the background.\n- `docker-compose stop [image name]`: Stop a service.\n- `docker-compose rm [image_name]`: Remove a service.\n- `docker build -t tagName .`: Create a Docker image with a specified tag name based on the current directory (where a Dockerfile is located).\n- `docker build --no-cache -t tagName .`- creating an image with **no cache**.\n- `docker images`: List all your Docker images.\n- `docker inspect service_ID or service_name`: For checking the current deployed dir on application.\n- `docker exec -it service_name bash` - executing services inside docker.(Like postgres, kafka etc), dir should be same as `docker-compose.yml`\n- `docker images` - seeing all images\n- `-d` running services in demon mode\n- `docker rmi image_name/image_id` - Removing a docker image\n</code></pre> <pre><code>- `docker run -d --network=ones-network -p 8090:8080 -e DYNAMIC_CONFIG_ENABLED=true provectuslabs/kafka-ui`: Run a Kafka UI container in daemon mode with network settings, port mapping, and environment variables.\n- `bin/kafka-server-start.sh config/server.properties` - starting zookeeper.\n- `bin/kafka-server-start.sh config/server.properties` - starting kafka-server.\n- `bin/kafka-topics.sh --list --bootstrap-server localhost:9092` - List of kafka-topics.\n- `bin/kafka-topics.sh --create --topic test-topic --bootstrap-server localhost:9092 --replication-factor 1 --partitions 1` - Creating a kafka-topic.\n- `bin/kafka-topics.sh --delete --topic your-topic --bootstrap-server localhost:9092` - Deleting a topic.\n- `bin/kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic your-topic --from-beginning` - Consuming data from a topic.\n</code></pre> <pre><code>Here are your additional Docker log commands presented in markdown format:\n- `docker logs [container_id]`: Show logs of your application up to the last breakpoint.\n- `docker logs [container_id] --follow`: Show logs of your service continuously; it will not terminate until you manually interrupt it using `Ctrl + C`.\n- `docker logs [container_id] --tail=N`: Show the last N logs from the container's log output.\n</code></pre> <pre><code>- `mv old_name new_name` - renaming a file in ubuntu, macOS.\n- `unzip` - extracting a compres file.\n- `ssh -N -L 2222:localhost:80 user@ip` - ssh tunnel from remote to local\n- `ssh -N -R 5432:localhost:5432 user@ip` - ssh tunnel from local to remote\n</code></pre> <pre><code>- `lsof -i:&lt;port_number&gt;` , check any operations are running on the port.\n- `kill &lt;pid&gt;`, killing a process/operation\n- `nano filename` - Open file in edit mode.\n- `CTRL + O` - it will writeout the file.\n- `enter` - Save it\n- `CTRL + X` - exit from nano editor.\n- `npm install -g pm2`\n- `pm2 start npm -- start -- --port 9111`\n- `pm2 list`\n- `pm2 stop &lt;app_name_or_id&gt;`\n- `tmux list-sessions` (for listing all active sessions)\n- `tmux kill-session -t my_session_name` (Deleting an active session)\n- `tmux new-session -d -s COMMAND` (For creating and running session in detach mode)\n</code></pre>"},{"location":"WorkExperience/","title":"Work Experience","text":""},{"location":"WorkExperience/#member-of-technical-staff-aviz-networks","title":"Member of Technical Staff, Aviz Networks","text":"<ul> <li>Currently building Gen AI powered Network Copilot, leveraging cutting-edge artificial intelligence technologies to revolutionize network management and optimization.</li> <li>Created a Rule Engine utilizing Kafka and Kafka Streams, integrated with MySQL database for efficient rule management and storage. The engine effectively automated trigger-based actions, enhancing system functionality and performance.</li> <li>Designed and implemented the ones-pyapi Python SDK, facilitating Network Engineers in setting up and configuring devices. Authored comprehensive documentation to ensure ease of use and understanding.</li> <li>Developed responsive user interfaces using React.js and implemented backend functionalities with Express.js, effectively contributing to the full-stack development of product ONES.</li> </ul>"},{"location":"WorkExperience/#software-engineer-2-hashedin-by-deloitte","title":"Software Engineer 2, Hashedin by Deloitte","text":"<ul> <li>Led a team of backend engineers for a project. </li> <li>Made 450+ contributions during this short period of time. </li> <li>Written multiple backend services using FastAPI also used websocket and Redis together for real-time data operations.</li> <li>Involved in Database designs and migrations.</li> <li>Written Backend services using Django in a project.</li> <li>Made poc for an automation tool using Golang, GraphQL and Postgres.</li> </ul>"},{"location":"WorkExperience/#software-engineer-coditas","title":"Software Engineer, Coditas","text":"<ul> <li>Worked for a fintech domain client(AngelOne), written backend services using Golang and Gin framework. </li> <li>Worked with AWS services like SQS, SNS and lambda.</li> <li>Made POCs for few use-cases using Grafana and Pagerduty.</li> <li>Got a chance to work for leading client in security domain Confluera( Acquired by XM Cyber), </li> <li>Written integration services with tools like Slack, Jira and Sendgrid using Python Flask in backend. </li> <li>Worked on multiple frontend tasks and used VueJs</li> </ul>"},{"location":"WorkExperience/#software-engineer-intern-datopic","title":"Software Engineer Intern, Datopic","text":"<ul> <li>Made a POC using docker, ElasticSearch, Goland and Python</li> </ul>"},{"location":"articles/","title":"Articles (Medium, LinkedIn and Other platforms)","text":""},{"location":"articles/#rule-engine-aviz-networks","title":"Rule Engine - Aviz Networks","text":""},{"location":"articles/#essentials-aws-services","title":"Essentials AWS services","text":""},{"location":"articles/#on-premises-vs-cloud-solutoins","title":"On Premises vs Cloud Solutoins","text":""},{"location":"articles/#finetuning-best-practices","title":"FineTuning Best practices","text":""},{"location":"articles/#factory-design-pattern","title":"Factory Design Pattern","text":""},{"location":"articles/#github-best-practices","title":"Github Best Practices","text":""},{"location":"articles/#setting-up-postgres-on-aws-rds","title":"Setting Up Postgres on AWS RDS","text":""},{"location":"articles/#python-debugger-aka-pdb","title":"Python Debugger AKA PDB","text":""},{"location":"skills/","title":"Skills","text":"<p>Here are the skills I've honed through my career, leveraging various technologies and frameworks: \ud83d\ude80 \ud83d\udcbb</p>"},{"location":"skills/#programming-languages","title":"Programming Languages","text":"<ul> <li>Python </li> <li>Golang </li> <li>Java </li> </ul>"},{"location":"skills/#advanced-skills","title":"Advanced Skills","text":"<ul> <li>Generative AI</li> <li>Large Language Models</li> <li>NLP (Natural Language Processing)</li> <li>Algorithms</li> <li>Data Structures</li> <li>Redis </li> </ul>"},{"location":"skills/#backend-technologies","title":"Backend Technologies","text":"<ul> <li>FastAPI</li> <li>Flask </li> <li>Django </li> <li>Kafka </li> <li>Kafka Streams</li> <li>MySQL </li> <li>Redis </li> <li>GraphQL </li> <li>Postgres </li> <li>WebSocket</li> <li>AWS Services (SQS, SNS, Lambda, RDS, CloudWatch, VMs) </li> <li>Docker </li> <li>ElasticSearch </li> <li>Express.js </li> </ul>"},{"location":"skills/#deployments","title":"Deployments","text":"<ul> <li>Git </li> <li>Docker </li> <li>Linux </li> </ul>"},{"location":"skills/#frontend-technologies","title":"Frontend Technologies","text":"<ul> <li>React.js </li> <li>Vue.js </li> </ul>"},{"location":"skills/#other-skills","title":"Other Skills","text":"<ul> <li>Database Design and Migrations</li> <li>Full-stack Development</li> <li>Backend Development</li> </ul>"}]}